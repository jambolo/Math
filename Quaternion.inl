/** @file *//********************************************************************************************************

                                                    Quaternion.inl

						                    Copyright 2003, John J. Bolton
	--------------------------------------------------------------------------------------------------------------

	$Header: //depot/Libraries/Math/Quaternion.inl#12 $

	$NoKeywords: $

 ********************************************************************************************************************/

#pragma once


#include "Quaternion.h"

#include "Math.h"

#include <cassert>
#include <cmath>


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Quaternion::Quaternion( float x, float y, float z, float w )
	: m_X( x ), m_Y( y ), m_Z( z ), m_W( w )
{
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Quaternion::Quaternion( float const q[ 4 ] )
	: m_X( q[ 0 ] ), m_Y( q[ 1 ] ), m_Z( q[ 2 ] ), m_W( q[ 3 ] )
{
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline float Quaternion::Length2() const
{
	return ( m_X * m_X + m_Y * m_Y + m_Z * m_Z + m_W * m_W ); 
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline float Quaternion::Length() const
{
	return sqrtf( Length2() ); 
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline float Quaternion::ILength() const
{
	float const	len	= Length();

	assert( !Math::IsCloseToZero( len ) );

	return ( !Math::IsCloseToZero( len ) ? 1.0f / len : 1.0f );
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline float Quaternion::ILength2() const
{
	float const	len2	= Length2();

	assert( !Math::IsCloseToZero( len2, 2.0*Math::DEFAULT_FLOAT_TOLERANCE ) );

	return ( !Math::IsCloseToZero( len2, 2.0*Math::DEFAULT_FLOAT_TOLERANCE ) ? 1.0f / len2 : 1.0f );
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline bool Quaternion::IsNormalized() const
{
	return ( Math::IsCloseTo( Length2(), 1.0, 2.0*Math::DEFAULT_FLOAT_NORMALIZED_TOLERANCE ) );
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Quaternion const & Quaternion::Normalize()
{
	return Scale( ILength() );
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Quaternion const & Quaternion::Conjugate()
{
	m_X = -m_X;
	m_Y = -m_Y;
	m_Z = -m_Z;
//	m_W = m_W;

	return *this;
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Quaternion const & Quaternion::Add( Quaternion const & b )
{
	m_X += b.m_X;
	m_Y += b.m_Y;
	m_Z += b.m_Z;
	m_W += b.m_W;

	return *this;
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Quaternion const & Quaternion::Subtract( Quaternion const & b )
{
	m_X -= b.m_X;
	m_Y -= b.m_Y;
	m_Z -= b.m_Z;
	m_W -= b.m_W;

	return *this;
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Quaternion const & Quaternion::Scale( float scale )
{
	m_X *= scale;
	m_Y *= scale;
	m_Z *= scale;
	m_W *= scale;

	return *this;
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Quaternion const & Quaternion::operator +=( Quaternion const & b )
{
	return Add( b );
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Quaternion const & Quaternion::operator -=( Quaternion const & b )
{
	return Subtract( b );
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Quaternion const & Quaternion::operator *=( float scale )
{
	return Scale( scale );
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Quaternion const & Quaternion::operator *=( Quaternion const & b )
{
	return Multiply( b );
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Quaternion Quaternion::operator -() const
{
	return Quaternion( *this ).Conjugate();
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Quaternion Quaternion::Identity()
{
	return Quaternion( 0.0f, 0.0f, 0.0f, 1.0f );
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Quaternion operator +( Quaternion const & a, Quaternion const & b )
{
	return Quaternion( a ).Add( b );
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Quaternion operator -( Quaternion const & a, Quaternion const & b )
{
	return Quaternion( a ).Subtract( b );
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

//!
//! @warning	The operation is not commutative.

inline Quaternion operator *( Quaternion const & a, Quaternion const & b )
{
	return Quaternion( a ).Multiply( b );
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Quaternion operator *( Quaternion const & q, float s )
{
	return Quaternion( q ).Scale( s );
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Quaternion operator *( float s, Quaternion const & q )
{
	return Quaternion( q ).Scale( s );
}
