/** @file *//********************************************************************************************************

                                                     Vector2d.inl

						                    Copyright 2003, John J. Bolton
	--------------------------------------------------------------------------------------------------------------

	$Header: //depot/Libraries/Math/Vector2d.inl#7 $

	$NoKeywords: $

 ********************************************************************************************************************/

#pragma once


#include "Vector2d.h"

#include "Math.h"

#include <cassert>
#include <cmath>


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Vector2d::Vector2d( double x, double y )
	: m_X( x ), m_Y( y )
{
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Vector2d::Vector2d( double const v[ 2 ] )
	: m_X( v[ 0 ] ), m_Y( v[ 1 ] )
{
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline double Vector2d::Length2() const
{
	return m_X * m_X + m_Y * m_Y; 
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline double Vector2d::Length() const
{
	return sqrt( Length2() ); 
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline double Vector2d::ILength() const
{
	double const	len	= Length();

	assert( !Math::IsCloseToZero( len, Math::DEFAULT_DOUBLE_TOLERANCE ) );

	if ( !Math::IsCloseToZero( len, Math::DEFAULT_DOUBLE_TOLERANCE ) )
	{
		return 1.0 / len;
	}
	else
	{
		return 1.0;
	}
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline double Vector2d::ILength2() const
{
	double const	len2	= Length2();

	assert( !Math::IsCloseToZero( len2, 2.0*Math::DEFAULT_DOUBLE_TOLERANCE ) );

	if ( !Math::IsCloseToZero( len2, 2.0*Math::DEFAULT_DOUBLE_TOLERANCE ) )
	{
		return 1.0 / len2;
	}
	else
	{
		return 1.0;
	}
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline bool Vector2d::IsNormalized() const
{
	return Math::IsCloseTo( Length2(), 1.0, 2.0*Math::DEFAULT_DOUBLE_NORMALIZED_TOLERANCE );
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Vector2d const & Vector2d::Negate()
{
	m_X = -m_X;
	m_Y = -m_Y;

	return *this;
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Vector2d const & Vector2d::Normalize()
{
	return Scale( ILength() );
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Vector2d const & Vector2d::Add( Vector2d const & b )
{
	m_X += b.m_X;
	m_Y += b.m_Y;

	return *this;
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Vector2d const & Vector2d::Subtract( Vector2d const & b )
{
	m_X -= b.m_X;
	m_Y -= b.m_Y;

	return *this;
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Vector2d const & Vector2d::Scale( double scale )
{
	m_X *= scale;
	m_Y *= scale;

	return *this;
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Vector2d const & Vector2d::operator +=( Vector2d const & b )
{
	return Add( b );
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Vector2d const & Vector2d::operator -=( Vector2d const & b )
{
	return Subtract( b );
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Vector2d const & Vector2d::operator *=( double scale )
{
	return Scale( scale );
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Vector2d const & Vector2d::operator *=( Matrix22d const & m )
{
	return Transform( m );
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Vector2d Vector2d::operator -() const
{
	return Vector2d( *this ).Negate();
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Vector2d Vector2d::Origin()
{
	return Vector2d( 0.0, 0.0 );
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Vector2d Vector2d::XAxis()
{
	return Vector2d( 1.0, 0.0 );
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Vector2d Vector2d::YAxis()
{
	return Vector2d( 0.0, 1.0 );
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Vector2d operator +( Vector2d const & a, Vector2d const & b )
{
	return Vector2d( a ).Add( b );
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline Vector2d operator -( Vector2d const & a, Vector2d const & b )
{
	return Vector2d( a ).Subtract( b );
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

//! @note	When multiplying a vector and a matrix, the operator is commutative since the order of the operands is
//!			only notational.

inline Vector2d operator *( Vector2d const & v, Matrix22d const & m )
{
	return Vector2d( v ).Transform( m );
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

//! @note	When multiplying a vector and a matrix, the operator is commutative since the order of the operands is
//!			only notational.

inline Vector2d operator *( Matrix22d const & m, Vector2d const & v )
{
	return Vector2d( v ).Transform( m );
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

inline double Dot( Vector2d const & a, Vector2d const & b )
{
	return a.m_X * b.m_X + a.m_Y * b.m_Y;
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

//! @note	When multiplying a vector and a scalar, the operator is commutative since the order of the operands is
//!			only notational.

inline Vector2d operator *( Vector2d const & v, double s )
{
	return Vector2d( v ).Scale( s );
}


/********************************************************************************************************************/
/*																													*/
/********************************************************************************************************************/

//! @note	When multiplying a vector and a scalar, the operator is commutative since the order of the operands is
//!			only notational.

inline Vector2d operator *( double s, Vector2d const & v )
{
	return Vector2d( v ).Scale( s );
}
